-- SubTexture

--[[
A SubTexture represents a section of another texture. This is achieved
solely by manipulation of texture coordinates, making the class very 
efficient. 

NB
It's not possible at now to create subtextures of subtextures but
adding support if needed should be an easy task because the only needs
is to obtains sub regions of super region
--]]

SubTexture = class(Texture)

function SubTexture:init(parentTexture, region)
    --[[
    assert(parentTexture:is_a(Texture))
    assert(not(parentTexture:is_a(SubTexture)), 
        "SubTexture of Subtexture is not supported at now")
    assert(region:is_a(Rect))
    --]]
    
    self.parent = parentTexture
    self.region = region
    self.textureData = self.parent.textureData
    self.width = self.parent.width * self.region.w
    self.height = self.parent.height * self.region.h
    self.rect = Rect(0,0,self.width,self.height)
    --use cache to store image generated by SubTexture:image()
    --use a weak table to store the cache so it can be 
    --garbage collected easily
    self.cahedImage = {}
    setmetatable(self.cahedImage,{__mode="v"})
end

--[[
return a raw codea image that rapresent the subtexture. To do that 
it needs to create a new image, set as context and draw the region 
of the original texture.
after that it caches the resulting image so it's already available 
for next request.
--]]
function SubTexture:image()
    local img = self.cahedImage[1]
    if not img then
        img = image(self.width,self.height)
        setContext(img)
        spriteMode(CORNER)
        sprite(self.parent.textureData,
            -self.region.x*self.parent.width,
            -self.region.y*self.parent.height)
        setContext()
        self.cahedImage[1] = img 
    end
    return img
end